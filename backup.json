<header className="flex shadow-md py-4 px-4 sm:px-10 bg-white font-[sans-serif] min-h-[70px] tracking-wide relative z-50">
<div className="flex flex-wrap items-center justify-between gap-5 w-full">
  <a href="javascript:void(0)">
    <img src={companyLogo} alt="logo" className="w-36" />
  </a>

  <div id="collapseMenu" className="max-lg:hidden lg:!block max-lg:before:fixed max-lg:before:bg-black max-lg:before:opacity-50 max-lg:before:inset-0 max-lg:before:z-50" style={{ display: isMenuOpen ? "block" : "none" }}>
    <button id="toggleClose" onClick={handleClick} className="lg:hidden fixed top-2 right-4 z-[100] rounded-full bg-white p-3">
      <svg xmlns="http://www.w3.org/2000/svg" className="w-4 fill-black" viewBox="0 0 320.591 320.591">
        <path d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z" data-original="#000000"></path>
        <path
          d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"
          data-original="#000000"
        ></path>
      </svg>
    </button>
    <ul className="lg:flex gap-x-4 max-lg:space-y-3 max-lg:fixed max-lg:bg-white max-lg:w-1/2 max-lg:min-w-[300px] max-lg:top-0 max-lg:left-0 max-lg:p-6 max-lg:h-full max-lg:shadow-md max-lg:overflow-auto z-50">
      <li className="mb-6 hidden max-lg:block">
        <a href="javascript:void(0)">
          <img src={companyLogo} alt="logo" className="w-36" />
        </a>
      </li>
      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#007bff] text-[#007bff] block font-semibold text-[15px]">
          Home
        </a>
      </li>
      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#6a8fb6] text-gray-500 block font-semibold text-[15px]">
          About us
        </a>
      </li>
      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#007bff] text-gray-500 block font-semibold text-[15px]">
          People
        </a>
      </li>
      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#007bff] text-gray-500 block font-semibold text-[15px]">
          Gallery
        </a>
      </li>
      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#007bff] text-gray-500 block font-semibold text-[15px]">
          Career
        </a>
      </li>
      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#007bff] text-gray-500 block font-semibold text-[15px]">
          Clients
        </a>
      </li>

      <li className="max-lg:border-b border-gray-300 max-lg:py-3 px-2">
        <a href="javascript:void(0)" className="hover:text-[#007bff] text-gray-500 block font-semibold text-[15px]">
          Post External
        </a>
      </li>
    </ul>
  </div>

  <div className="flex max-lg:ml-auto space-x-3">
    <button className="px-4 py-2 text-sm rounded-full font-bold text-white border-2 border-[#007bff] bg-[#007bff] transition-all ease-in-out duration-300 hover:bg-transparent hover:text-[#007bff]">Login</button>
    <button className="px-4 py-2 text-sm rounded-full font-bold text-white border-2 border-[#007bff] bg-[#007bff] transition-all ease-in-out duration-300 hover:bg-transparent hover:text-[#007bff]">Sign up</button>

    <button id="toggleOpen" onClick={handleClick} className="lg:hidden">
      <svg className="w-7 h-7" fill="#000" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
      </svg>
    </button>
  </div>
</div>
</header>















<Form {...form}>
                <form
                    onSubmit={form.handleSubmit(onSubmit)}
                    className="space-y-8"
                >
                    <FormField
                        control={form.control}
                        email="name"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Name</FormLabel>
                                <FormControl>
                                    <Input placeholder="shadcn" {...field} />
                                </FormControl>
                                <FormDescription>
                                    This is your Name.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        email="email"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Email</FormLabel>
                                <FormControl>
                                    <Input placeholder="shadcn" {...field} />
                                </FormControl>
                                <FormDescription>
                                    This is your Email.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <FormField
                        control={form.control}
                        email="password"
                        render={({ field }) => (
                            <FormItem>
                                <FormLabel>Password</FormLabel>
                                <FormControl>
                                    <Input placeholder="shadcn" {...field} />
                                </FormControl>
                                <FormDescription>
                                    This is your Password.
                                </FormDescription>
                                <FormMessage />
                            </FormItem>
                        )}
                    />
                    <Button type="submit">Submit</Button>
                </form>
            </Form>
            <br />
            <br />
            <br />
            <br />
            <Tabs defaultValue="signin" className="text-center">
                {/* Login TAB @@@@@@@@@@@@@@@@@@@@@@@@@ */}
                <TabsList className="w-full">
                    <Link to="/login" className="w-full">
                        <TabsTrigger value="signin" className="w-full">
                            Signin
                        </TabsTrigger>
                    </Link>
                    <Link to="/" className="w-full">
                        <TabsTrigger value="signup" className="w-full">
                            Signup
                        </TabsTrigger>
                    </Link>
                </TabsList>
                {status === 'error' && (
                    <div
                        style={{
                            backgroundColor: '#e57373',
                            textAlign: 'center',
                            fontWeight: 'bold',
                        }}
                        className="Auth-form"
                    >
                        {error}
                    </div>
                )}
                <TabsContent value="signin">
                    <form onSubmit={handleSubmit}>
                        <DialogHeader>
                            <Label>Login</Label>
                            Use your email and password to login.
                        </DialogHeader>
                        <div className="grid gap-4 py-4">
                            <div className="grid grid-cols-4 items-center gap-4">
                                <Label htmlFor="email" className="text-right">
                                    E-Mail
                                </Label>
                                <Input
                                    id="email"
                                    // defaultValue="example@examplemail.com"
                                    placeholder="example@gmail.com"
                                    className="col-span-3"
                                    type="email"
                                    ref={userRef}
                                    value={email}
                                    onChange={(e) => {
                                        setError('')
                                        setEmail(e.target.value)
                                    }}
                                    required
                                />
                            </div>
                            <div className="grid grid-cols-4 items-center gap-4">
                                <Label
                                    htmlFor="password"
                                    className="text-right"
                                >
                                    Password
                                </Label>
                                <Input
                                    id="password"
                                    // defaultValue="********"
                                    placeholder="*********"
                                    className="col-span-3"
                                    type="password"
                                    autoComplete="off"
                                    onChange={(e) => {
                                        setError('')

                                        setPassword(e.target.value)
                                    }}
                                    value={password}
                                    required
                                />
                            </div>
                        </div>
                        <Button type="submit" onClick={() => handleSubmit}>
                            {t('login')} TT
                        </Button>
                    </form>
                </TabsContent>

                {/* REGISTER TAB @@@@@@@@@@@@@@@@@@@@@@@@@ */}
                <TabsContent value="signup">
                    <DialogHeader>
                        <Label>Register</Label>
                        Provide the details for your account
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                        <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="name" className="text-right">
                                Name
                            </Label>
                            <Input
                                id="name"
                                // defaultValue="Stefan Peterson"
                                placeholder="Stefan Peterson"
                                className="col-span-3"
                                type="text"
                                value={name}
                                onChange={(e) => {
                                    setName(e.target.value)
                                }}
                            />
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="email" className="text-right">
                                E-Mail*
                            </Label>
                            <Input
                                id="email"
                                // defaultValue="example@examplemail.com"
                                placeholder="example@gmail.com"
                                className="col-span-3"
                                type="email"
                                value={email}
                                onChange={(e) => {
                                    setEmail(e.target.value)
                                }}
                                required
                            />
                        </div>
                        <div className="grid grid-cols-4 items-center gap-4">
                            <Label htmlFor="password" className="text-right">
                                Password*
                            </Label>
                            <Input
                                id="password"
                                // defaultValue="********"
                                placeholder="*********"
                                className="col-span-3"
                                type="password"
                                onChange={(e) => {
                                    setPassword(e.target.value)
                                }}
                                value={password}
                                required
                            />
                        </div>
                    </div>
                    <Button
                        type="submit"
                        onClick={() =>
                            toast({
                                variant: 'destructive',
                                title: 'Scheduled: Register up',
                                description:
                                    'Friday, February 10, 2023 at 5:57 PM',
                            })
                        }
                    >
                        {t('register')}
                    </Button>
                </TabsContent>
            </Tabs>












            -HEAAAAAAAAAAAAADER 



            import * as React from 'react'
import {
    ColumnDef,
    SortingState,
    flexRender,
    getCoreRowModel,
    getPaginationRowModel,
    ColumnFiltersState,
    getSortedRowModel,
    getFilteredRowModel,
    VisibilityState,
    useReactTable,
} from '@tanstack/react-table'
import { Input } from '@/components/ui/input'

import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table'
import {
    DropdownMenu,
    DropdownMenuCheckboxItem,
    DropdownMenuContent,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Button } from '../ui/button'
import { ModeToggle } from '../mode-toggle'

interface DataTableProps<TData, TValue> {
    columns: ColumnDef<TData, TValue>[]
    data: TData[]
}

const findMaxValueInRow = (row: any) => {
    const values = row
        .getVisibleCells()
        .map((cell: any) => Number(cell.getValue()))
    return Math.max(...values)
}

export function DataTable<TData, TValue>({
    columns,
    data,
}: DataTableProps<TData, TValue>) {
    const [sorting, setSorting] = React.useState<SortingState>([])
    const [columnFilters, setColumnFilters] =
        React.useState<ColumnFiltersState>([])
    const [columnVisibility, setColumnVisibility] =
        React.useState<VisibilityState>({})
    const table = useReactTable({
        data,
        columns,
        getCoreRowModel: getCoreRowModel(),
        onSortingChange: setSorting,
        getSortedRowModel: getSortedRowModel(),
        onColumnFiltersChange: setColumnFilters,
        getFilteredRowModel: getFilteredRowModel(),
        onColumnVisibilityChange: setColumnVisibility,
        state: {
            sorting,
            columnVisibility,
            columnFilters,
        },
    })

    return (
        <div className="rounded-md border dark:border-cyan-900">
            <div className="flex flex-row justify-center align-middle gap-3">
                <ModeToggle />
                <div className="flex items-center py-2">
                    <Input
                        placeholder="Filter emails..."
                        value={
                            (table
                                .getColumn('email')
                                ?.getFilterValue() as string) ?? ''
                        }
                        onChange={(event) =>
                            table
                                .getColumn('email')
                                ?.setFilterValue(event.target.value)
                        }
                        className="max-w-sm"
                    />
                </div>
                <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                        <Button variant="outline" className="ml-auto">
                            Columns
                        </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                        {table
                            .getAllColumns()
                            .filter((column) => column.getCanHide())
                            .map((column) => {
                                return (
                                    <DropdownMenuCheckboxItem
                                        key={column.id}
                                        className="capitalize"
                                        checked={column.getIsVisible()}
                                        onCheckedChange={(value: any) =>
                                            column.toggleVisibility(!!value)
                                        }
                                    >
                                        {column.id}
                                    </DropdownMenuCheckboxItem>
                                )
                            })}
                    </DropdownMenuContent>
                </DropdownMenu>
            </div>
            <Table className="hidden lg:table">
                <TableHeader>
                    {table.getHeaderGroups().map((headerGroup) => (
                        <TableRow key={headerGroup.id}>
                            {headerGroup.headers.map((header) => (
                                <TableHead key={header.id}>
                                    {header.isPlaceholder
                                        ? null
                                        : flexRender(
                                              header.column.columnDef.header,
                                              header.getContext()
                                          )}
                                </TableHead>
                            ))}
                        </TableRow>
                    ))}
                </TableHeader>
                <TableBody>
                    {table.getRowModel().rows?.length ? (
                        table.getRowModel().rows.map((row) => {
                            const maxValue = findMaxValueInRow(row)

                            return (
                                <TableRow
                                    key={row.id}
                                    data-state={
                                        row.getIsSelected() && 'selected'
                                    }
                                >
                                    {row
                                        .getVisibleCells()
                                        .map((cell, index) => (
                                            <TableCell
                                                key={cell.id}
                                                style={{
                                                    backgroundColor:
                                                        index > 0 &&
                                                        Number(
                                                            cell.getValue()
                                                        ) === maxValue
                                                            ? 'lightgreen'
                                                            : '',
                                                }}
                                            >
                                                {flexRender(
                                                    cell.column.columnDef.cell,
                                                    cell.getContext()
                                                )}
                                            </TableCell>
                                        ))}
                                </TableRow>
                            )
                        })
                    ) : (
                        <TableRow>
                            <TableCell
                                colSpan={columns.length}
                                className="h-24 text-center"
                            >
                                No results.
                            </TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>

            {/* Responsive layout for lg and below */}
            <div className="lg:hidden grid gap-4 p-4">
                {table.getRowModel().rows?.length ? (
                    table.getRowModel().rows.map((row) => (
                        <div
                            key={row.id}
                            className="border rounded-lg p-4 space-y-4"
                        >
                            {row.getVisibleCells().map((cell) => (
                                <div key={cell.id} className="flex flex-col">
                                    <span className="font-semibold">
                                        {/* {flexRender(
                                            cell.column.columnDef.header,
                                             cell.column.getHeaderContext()
                                        )} */}
                                    </span>
                                    <span>
                                        {flexRender(
                                            cell.column.columnDef.cell,
                                            cell.getContext()
                                        )}
                                    </span>
                                </div>
                            ))}
                        </div>
                    ))
                ) : (
                    <div className="text-center">No results.</div>
                )}
            </div>
        </div>
    )
}
